use super::cli::Cli;
use super::common::*;
use crate::application::Application;
use clap::{App, Arg, SubCommand};

impl<'a, 'b> Cli<'a, 'b> {
    // prepare and use clap functions for cli
    pub fn new(application: Application) -> Self {
        let app = App::new(APP_NAME)
            .version(APP_VERSION)
            .about(APP_ABOUT)
            .author(APP_AUTHOR)
            .arg(
                Arg::with_name(KEY_LOG)
                    .short(KEY_LOG_SHORT)
                    .long(KEY_LOG_LONG)
                    .value_name(KEY_LOG_FILE)
                    .takes_value(true)
                    .default_value(DEFAULT_LOG_FILENAME)
                    .help(KEY_LOG_HELP),
            )
            .arg(
                Arg::with_name(KEY_CFG)
                    .short(KEY_CFG_SHORT)
                    .long(KEY_CFG_LONG)
                    .value_name(KEY_CFG_FILE)
                    .takes_value(true)
                    .default_value(DEFAULT_CFG_FILENAME)
                    .help(KEY_CFG_HELP),
            )
            .arg(
                Arg::with_name(KEY_OUTPUT)
                    .short(KEY_OUTPUT_SHORT)
                    .long(KEY_OUTPUT_LONG)
                    .value_name(KEY_OUTPUT_FILE)
                    .takes_value(true)
                    .default_value(DEFAULT_OUTPUT_FILENAME)
                    .help(KEY_OUTPUT_HELP),
            )
            .arg(
                Arg::with_name(KEY_QUIET)
                    .short(KEY_QUIET_SHORT)
                    .long(KEY_QUIET_LONG)
                    .help(KEY_QUIET_HELP),
            )
            .arg(
                Arg::with_name(KEY_VERBOSE)
                    .short(KEY_VERBOSE_SHORT)
                    .multiple(true)
                    //.takes_value(false)
                    .help(KEY_VERBOSE_HELP),
            )
            // ls
            .subcommand(
                SubCommand::with_name(CMD_LS)
                    .about(CMD_LS_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(Arg::with_name(KEY_PATH).help(KEY_PATH_HELP).index(1)),
            )
            // sort
            .subcommand(
                SubCommand::with_name(CMD_SORT)
                    .about(CMD_SORT_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_NAME)
                            .short(KEY_BITFLAG_NAME_SHORT)
                            .long(KEY_BITFLAG_NAME_LONG)
                            .help(KEY_BITFLAG_NAME_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_DESC)
                            .short(KEY_BITFLAG_DESC_SHORT)
                            .long(KEY_BITFLAG_DESC_LONG)
                            .help(KEY_BITFLAG_DESC_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_ACCESSED)
                            .short(KEY_BITFLAG_ACCESSED_SHORT)
                            .long(KEY_BITFLAG_ACCESSED_LONG)
                            .help(KEY_BITFLAG_ACCESSED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_MODIFIED)
                            .short(KEY_BITFLAG_MODIFIED_SHORT)
                            .long(KEY_BITFLAG_MODIFIED_LONG)
                            .help(KEY_BITFLAG_MODIFIED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_CREATED)
                            .short(KEY_BITFLAG_CREATED_SHORT)
                            .long(KEY_BITFLAG_CREATED_LONG)
                            .help(KEY_BITFLAG_CREATED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_SIZE)
                            .short(KEY_BITFLAG_SIZE_SHORT)
                            .long(KEY_BITFLAG_SIZE_LONG)
                            .help(KEY_BITFLAG_SIZE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_FILE_TYPE)
                            .short(KEY_BITFLAG_FILE_TYPE_SHORT)
                            .long(KEY_BITFLAG_FILE_TYPE_LONG)
                            .help(KEY_BITFLAG_FILE_TYPE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_TAGS)
                            .short(KEY_BITFLAG_TAGS_SHORT)
                            .long(KEY_BITFLAG_TAGS_LONG)
                            .help(KEY_BITFLAG_TAGS_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_SORT_ORDER)
                            .short(KEY_BITFLAG_SORT_ORDER_SHORT)
                            .long(KEY_BITFLAG_SORT_ORDER_LONG)
                            .help(KEY_BITFLAG_SORT_ORDER_HELP)
                            .takes_value(true)
                            .possible_value(KEY_BITFLAG_SORT_ORDER_ASC)
                            .possible_value(KEY_BITFLAG_SORT_ORDER_DESC),
                    ),
            )
            // clear
            .subcommand(
                SubCommand::with_name(CMD_CLEAR)
                    .about(CMD_CLEAR_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_DIR)
                            .help(KEY_DIR_HELP)
                            .default_value(DEFAULT_DIR_FILENAME)
                            .index(1),
                    )
                    .arg(
                        Arg::with_name(KEY_RECURSIVE)
                            .short(KEY_RECURSIVE_SHORT)
                            .long(KEY_RECURSIVE_LONG)
                            .help(KEY_RECURSIVE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_NAME)
                            .short(KEY_BITFLAG_NAME_SHORT)
                            .long(KEY_BITFLAG_NAME_LONG)
                            .help(KEY_BITFLAG_NAME_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_DESC)
                            .short(KEY_BITFLAG_DESC_SHORT)
                            .long(KEY_BITFLAG_DESC_LONG)
                            .help(KEY_BITFLAG_DESC_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_ACCESSED)
                            .short(KEY_BITFLAG_ACCESSED_SHORT)
                            .long(KEY_BITFLAG_ACCESSED_LONG)
                            .help(KEY_BITFLAG_ACCESSED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_MODIFIED)
                            .short(KEY_BITFLAG_MODIFIED_SHORT)
                            .long(KEY_BITFLAG_MODIFIED_LONG)
                            .help(KEY_BITFLAG_MODIFIED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_CREATED)
                            .short(KEY_BITFLAG_CREATED_SHORT)
                            .long(KEY_BITFLAG_CREATED_LONG)
                            .help(KEY_BITFLAG_CREATED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_SIZE)
                            .short(KEY_BITFLAG_SIZE_SHORT)
                            .long(KEY_BITFLAG_SIZE_LONG)
                            .help(KEY_BITFLAG_SIZE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_FILE_TYPE)
                            .short(KEY_BITFLAG_FILE_TYPE_SHORT)
                            .long(KEY_BITFLAG_FILE_TYPE_LONG)
                            .help(KEY_BITFLAG_FILE_TYPE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_TAGS)
                            .short(KEY_BITFLAG_TAGS_SHORT)
                            .long(KEY_BITFLAG_TAGS_LONG)
                            .help(KEY_BITFLAG_TAGS_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_CHILDREN)
                            .short(KEY_BITFLAG_CHILDREN_SHORT)
                            .long(KEY_BITFLAG_CHILDREN_LONG)
                            .help(KEY_BITFLAG_CHILDREN_HELP),
                    ),
            )
            // init
            .subcommand(
                SubCommand::with_name(CMD_INIT)
                    .about(CMD_INIT_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_IGNORE)
                            .short(KEY_IGNORE_SHORT)
                            .long(KEY_IGNORE_LONG)
                            .help(KEY_IGNORE_HELP)
                            //.value_names(&[KEY_IGNORE_FILE1, KEY_IGNORE_FILE2, KEY_IGNORE_FILE3])
                            .takes_value(true)
                            //.number_of_values(1)
                            .multiple(true),
                        //.min_values(1),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_NAME)
                            .short(KEY_BITFLAG_NAME_SHORT)
                            .long(KEY_BITFLAG_NAME_LONG)
                            .help(KEY_BITFLAG_NAME_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_DESC)
                            .short(KEY_BITFLAG_DESC_SHORT)
                            .long(KEY_BITFLAG_DESC_LONG)
                            .help(KEY_BITFLAG_DESC_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_ACCESSED)
                            .short(KEY_BITFLAG_ACCESSED_SHORT)
                            .long(KEY_BITFLAG_ACCESSED_LONG)
                            .help(KEY_BITFLAG_ACCESSED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_MODIFIED)
                            .short(KEY_BITFLAG_MODIFIED_SHORT)
                            .long(KEY_BITFLAG_MODIFIED_LONG)
                            .help(KEY_BITFLAG_MODIFIED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_CREATED)
                            .short(KEY_BITFLAG_CREATED_SHORT)
                            .long(KEY_BITFLAG_CREATED_LONG)
                            .help(KEY_BITFLAG_CREATED_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_SIZE)
                            .short(KEY_BITFLAG_SIZE_SHORT)
                            .long(KEY_BITFLAG_SIZE_LONG)
                            .help(KEY_BITFLAG_SIZE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_FILE_TYPE)
                            .short(KEY_BITFLAG_FILE_TYPE_SHORT)
                            .long(KEY_BITFLAG_FILE_TYPE_LONG)
                            .help(KEY_BITFLAG_FILE_TYPE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_BITFLAG_TAGS)
                            .short(KEY_BITFLAG_TAGS_SHORT)
                            .long(KEY_BITFLAG_TAGS_LONG)
                            .help(KEY_BITFLAG_TAGS_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_FORCE)
                            .short(KEY_FORCE_SHORT)
                            .long(KEY_FORCE_LONG)
                            .help(KEY_FORCE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_EMPTY)
                            .short(KEY_EMPTY_SHORT)
                            .long(KEY_EMPTY_LONG)
                            .help(KEY_EMPTY_HELP),
                    )
                    //.arg(
                    //Arg::with_name(KEY_DIR)
                    //.short(KEY_DIR_SHORT)
                    //.long(KEY_DIR_LONG)
                    //.help(KEY_DIR_HELP)
                    //.value_name(KEY_DIR_FILENAME)
                    //.default_value(DEFAULT_DIR_FILENAME)
                    //.takes_value(true),
                    //),
                    .arg(
                        Arg::with_name(KEY_DIR)
                            .help(KEY_DIR_HELP)
                            .default_value(DEFAULT_DIR_FILENAME)
                            .index(1),
                    ),
            )
            // add
            .subcommand(
                SubCommand::with_name(CMD_ADD)
                    .about(CMD_ADD_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .help(KEY_DB_HELP)
                            .default_value(DEFAULT_DB_FILENAME)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_RECURSIVE)
                            .short(KEY_RECURSIVE_SHORT)
                            .long(KEY_RECURSIVE_LONG)
                            .help(KEY_RECURSIVE_HELP),
                    )
                    .arg(
                        Arg::with_name(KEY_FILE_NAME)
                            .help(KEY_FILE_NAME_HELP)
                            .required(true)
                            .index(1),
                    ),
            )
            // edit
            .subcommand(
                SubCommand::with_name(CMD_EDIT)
                    .about(CMD_EDIT_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .help(KEY_DB_HELP)
                            .default_value(DEFAULT_DB_FILENAME)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_DESC)
                            .short(KEY_DESC_SHORT)
                            .long(KEY_DESC_LONG)
                            .value_name(KEY_DESCRIPTION)
                            .help(KEY_DESC_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_TAGS)
                            .short(KEY_TAGS_SHORT)
                            .long(KEY_TAGS_LONG)
                            //.value_name(KEY_TAGS)
                            .help(KEY_TAGS_HELP)
                            .takes_value(true)
                            .multiple(true),
                    )
                    .arg(
                        Arg::with_name(KEY_COMMENT)
                            .short(KEY_COMMENT_SHORT)
                            .long(KEY_COMMENT_LONG)
                            .value_name(KEY_COMMENT_DESC)
                            .help(KEY_COMMENT_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_FILE_NAME)
                            .help(KEY_FILE_NAME_HELP)
                            .required(true)
                            .index(1),
                    ),
            )
            // status
            .subcommand(
                SubCommand::with_name(CMD_STATUS)
                    .about(CMD_STATUS_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    ),
            )
            // rm
            .subcommand(
                SubCommand::with_name(CMD_RM)
                    .about(CMD_RM_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_DESC)
                            .short(KEY_DESC_SHORT)
                            .long(KEY_DESC_LONG)
                            .value_name(KEY_DESCRIPTION)
                            .help(KEY_DESC_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_FILE_NAME)
                            .help(KEY_FILE_NAME_HELP)
                            .required(true)
                            .index(1),
                    ),
            )
            // read
            .subcommand(
                SubCommand::with_name(CMD_READ)
                    .about(CMD_READ_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .default_value(DEFAULT_DB_FILENAME)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_DESC)
                            .short(KEY_DESC_SHORT)
                            .long(KEY_DESC_LONG)
                            .value_name(KEY_DESCRIPTION)
                            .help(KEY_DESC_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_FILE_NAME)
                            .help(KEY_FILE_NAME_HELP)
                            .required(true)
                            .index(1),
                    ),
            )
            // print
            .subcommand(
                SubCommand::with_name(CMD_PRINT)
                    .about(CMD_PRINT_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .default_value(DEFAULT_DB_FILENAME)
                            .value_name(KEY_DB_FILE)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_TEMPLATE)
                            .short(KEY_TEMPLATE_SHORT)
                            .long(KEY_TEMPLATE_LONG)
                            .value_name(KEY_TEMPLATE_FILE)
                            .help(KEY_TEMPLATE_HELP)
                            .takes_value(true),
                    )
                    .arg(
                        Arg::with_name(KEY_OUTPUT)
                            .short(KEY_OUTPUT_SHORT)
                            .long(KEY_OUTPUT_LONG)
                            .default_value(DEFAULT_OUTPUT_FILENAME)
                            .value_name(KEY_OUTPUT_FILE)
                            .takes_value(true)
                            .help(KEY_OUTPUT_HELP),
                    ),
            )
            // meta
            .subcommand(
                SubCommand::with_name(CMD_PRINT_META)
                    .about(CMD_PRINT_META_TEXT)
                    .arg(
                        Arg::with_name(KEY_DB)
                            .short(KEY_DB_SHORT)
                            .long(KEY_DB_LONG)
                            .value_name(KEY_DB_FILE)
                            .help(KEY_DB_HELP)
                            .takes_value(true),
                    ),
            );

        Cli {
            cli: app,
            app: application,
        }
    }
}
